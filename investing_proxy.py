#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üìä –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π FastAPI —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD/RUB üìä

‚ö†Ô∏è –í–ê–ñ–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ù–ê–ó–ù–ê–ß–ï–ù–ò–ò –ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ò ‚ö†Ô∏è

–î–∞–Ω–Ω—ã–π Python-—Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–ª—è—Ö 
–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ API –∏ –≤–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏.

üéØ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã FastAPI
- –ò–∑—É—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥—É
- –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

üë§ –¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø:
- –°—Ç—É–¥–µ–Ω—Ç—ã, –∏–∑—É—á–∞—é—â–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã
- –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∏–∑—É—á–∞—é—â–∏–µ FastAPI –∏ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥
- –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
- –ß–∞—Å—Ç–Ω—ã–µ –ª–∏—Ü–∞ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π

‚ö° –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç FastAPI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è REST API
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON, XML –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Excel —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –í–ï–ë–°–õ–£–ñ–ë–ê

üîß –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –û–ö–†–£–ñ–ï–ù–ò–Æ:
- Python 3.8+
- fastapi, uvicorn, requests, cloudscraper
- –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

üìù –ü–û–†–Ø–î–û–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install fastapi uvicorn requests cloudscraper
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python investing_api.py
3. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000/docs –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è API
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ endpoints —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏—è

‚öñÔ∏è –î–ò–°–ö–õ–ï–ô–ú–ï–†:
–≠—Ç–æ—Ç –∫–æ–¥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è "–ö–ê–ö –ï–°–¢–¨", –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –≥–∞—Ä–∞–Ω—Ç–∏–π. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 
–∫–æ–¥–∞ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–ª–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ.

–í—Å–µ–≥–¥–∞ —Å–æ–±–ª—é–¥–∞–π—Ç–µ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–µ–±-—Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ.

–ê–≤—Ç–æ—Ä: –ú–∏—Ö–∞–∏–ª –®–∞—Ä–¥–∏–Ω https://shardin.name/
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 07.09.2025
–í–µ—Ä—Å–∏—è: 1.2
–õ–∏—Ü–µ–Ω–∑–∏—è: MIT (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π)

–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: https://github.com/empenoso/excel-data-bridge

"""

import requests
import json
import time
import locale
from datetime import datetime
from fastapi import FastAPI, HTTPException
from fastapi.responses import Response
from xml.etree.ElementTree import Element, SubElement, tostring
from xml.dom import minidom
import logging
import random
import sys
import os

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ ---
os.environ["PYTHONUTF8"] = "1"
sys.stdout.reconfigure(encoding='utf-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏
try:
    locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')
except locale.Error:
    try:
        locale.setlocale(locale.LC_ALL, 'Russian_Russia.1251')
    except locale.Error:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –≤—ã–≤–æ–¥–∞ sys.stdout, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏ .bat
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)-8s - %(message)s',
    stream=sys.stdout
)

app = FastAPI(
    title="USD/RUB Exchange Rate API",
    description="API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD/RUB —Å Investing.com",
    version="1.0.2"
)

class InvestingParser:
    def __init__(self):
        self.user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
        ]
        self.session = None
        self.init_session()

    def init_session(self):
        self.session = requests.Session()
        user_agent = random.choice(self.user_agents)
        headers = {
            'User-Agent': user_agent, 'Accept': 'application/json, text/javascript, */*; q=0.01',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7', 'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive', 'DNT': '1', 'Sec-Fetch-Dest': 'empty', 'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'same-origin'
        }
        self.session.headers.update(headers)
        from requests.adapters import HTTPAdapter
        from urllib3.util.retry import Retry
        retry_strategy = Retry(total=3, backoff_factor=1, status_forcelist=[429, 500, 502, 503, 504])
        adapter = HTTPAdapter(max_retries=retry_strategy)
        self.session.mount("https://", adapter)

    def try_cloudscraper(self):
        try:
            import cloudscraper
            logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º cloudscraper –¥–ª—è –æ–±—Ö–æ–¥–∞ CloudFlare...")
            scraper = cloudscraper.create_scraper()
            url = "https://api.investing.com/api/financialdata/2186/historical/chart/"
            params = {'interval': 'PT1M', 'pointscount': '160'}
            response = scraper.get(url, params=params, timeout=30)
            if response.status_code == 200:
                return self.process_data(response.json())
            return {'error': f'HTTP Error {response.status_code}'}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ CloudScraper: {str(e)}")
            return {'error': f'CloudScraper error: {str(e)}'}

    def try_requests(self):
        try:
            logging.info("–ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ requests...")
            url = "https://api.investing.com/api/financialdata/2186/historical/chart/"
            params = {'interval': 'PT1M', 'pointscount': '160'}
            response = self.session.get(url, params=params, timeout=30)
            if response.status_code == 200:
                return self.process_data(response.json())
            return {'error': f'HTTP Error {response.status_code}'}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ requests: {str(e)}")
            return {'error': f'Requests error: {str(e)}'}

    def unix_to_excel_timestamp(self, unix_timestamp):
        return (unix_timestamp / 86400) + 25569

    def format_rate_russian(self, rate):
        return str(rate).replace('.', ',')

    def process_data(self, data):
        if 'data' not in data or not data['data']:
            return {'error': 'No data in investing.com response'}
        latest_record = data['data'][-1]
        timestamp_ms, rate = latest_record[0], latest_record[4]
        unix_timestamp = int(timestamp_ms / 1000)
        excel_timestamp = self.unix_to_excel_timestamp(unix_timestamp)
        return {
            'rate': rate, 'rate_formatted': self.format_rate_russian(rate),
            'timestamp': unix_timestamp, 'timestamp_excel': excel_timestamp,
            'datetime': datetime.fromtimestamp(unix_timestamp).strftime('%Y-%m-%d %H:%M:%S'),
            'status': 'success', 'source': 'Investing.com'
        }

    def get_usd_rub_data(self):
        strategies = [("CloudScraper", self.try_cloudscraper), ("Direct Requests", self.try_requests)]
        for name, func in strategies:
            logging.info(f"Trying strategy: {name}")
            result = func()
            if 'rate' in result:
                logging.info(f"SUCCESS {name}! Rate: {result['rate']}")
                return result
            logging.warning(f"FAILED {name}: {result.get('error', 'Unknown error')}")
        return {'error': 'All strategies failed'}

parser = InvestingParser()

@app.on_event("startup")
def print_startup_message():
    """
    –í—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞.
    """
    print("="*70)
    print("üöÄ FastAPI –°–ï–†–í–ï–† –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø USD/RUB –° INVESTING.COM")
    print("="*70)
    print("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
    print("   ‚Ä¢ http://localhost:8000/usd_rub - JSON —Ñ–æ—Ä–º–∞—Ç")
    print("   ‚Ä¢ http://localhost:8000/usd_rub/xml - XML —Ñ–æ—Ä–º–∞—Ç")
    print("   ‚Ä¢ http://localhost:8000/usd_rub/rate - –∫—É—Ä—Å (—Ä—É—Å—Å–∫–∏–π: 81,25)")
    print("   ‚Ä¢ http://localhost:8000/usd_rub/rate/en - –∫—É—Ä—Å (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π: 81.25)")
    print("   ‚Ä¢ http://localhost:8000/usd_rub/timestamp - Excel timestamp (—Å –∑–∞–ø—è—Ç–æ–π)")
    print("   ‚Ä¢ http://localhost:8000/usd_rub/datetime - –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (—Ç–µ–∫—Å—Ç)")
    print("   ‚Ä¢ http://localhost:8000/usd_rub/timestamp/unix - Unix timestamp")
    print("   ‚Ä¢ http://localhost:8000/status - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞")
    print("   ‚Ä¢ http://localhost:8000/docs - Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    print()
    print("üìã –î–ª—è Excel –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É–ª—ã:")
    print("   –ö—É—Ä—Å (—Ä—É—Å—Å–∫–∏–π): =–í–ï–ë–°–õ–£–ñ–ë–ê(\"http://localhost:8000/usd_rub/rate\")")
    print("   –î–∞—Ç–∞ (—Ç–µ–∫—Å—Ç): =–í–ï–ë–°–õ–£–ñ–ë–ê(\"http://localhost:8000/usd_rub/datetime\")")
    print("   –î–∞—Ç–∞ (Excel): =–í–ï–ë–°–õ–£–ñ–ë–ê(\"http://localhost:8000/usd_rub/timestamp\")")
    print("="*70)
    # –ö–æ–Ω–µ—Ü –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
    
@app.get("/usd_rub")
async def get_usd_rub():
    data = parser.get_usd_rub_data()
    if 'error' in data: raise HTTPException(500, detail=data)
    return data

@app.get("/usd_rub/xml")
async def get_usd_rub_xml():
    data = parser.get_usd_rub_data()
    root = Element('currency_data')
    if 'error' in data:
        SubElement(root, 'error').text = str(data['error'])
    else:
        for key, value in data.items():
            SubElement(root, key).text = str(value).replace('.', ',') if isinstance(value, float) else str(value)
    pretty_xml = minidom.parseString(tostring(root, 'utf-8')).toprettyxml(indent="  ", encoding='utf-8')
    return Response(content=pretty_xml, media_type='application/xml; charset=utf-8')

@app.get("/usd_rub/rate")
async def get_rate_only():
    data = parser.get_usd_rub_data()
    if 'error' in data: raise HTTPException(500, detail=data)
    return Response(content=data['rate_formatted'], media_type='text/plain; charset=utf-8')

@app.get("/usd_rub/rate/en")
async def get_rate_only_english():
    data = parser.get_usd_rub_data()
    if 'error' in data: raise HTTPException(500, detail=data)
    return Response(content=str(data['rate']), media_type='text/plain')

@app.get("/usd_rub/timestamp")
async def get_timestamp_excel():
    data = parser.get_usd_rub_data()
    if 'error' in data: raise HTTPException(500, detail=data)
    return Response(content=str(data['timestamp_excel']).replace('.', ','), media_type='text/plain; charset=utf-8')

@app.get("/usd_rub/timestamp/unix")
async def get_timestamp_unix():
    data = parser.get_usd_rub_data()
    if 'error' in data: raise HTTPException(500, detail=data)
    return Response(content=str(data['timestamp']), media_type='text/plain')

@app.get("/usd_rub/datetime")
async def get_datetime_text():
    data = parser.get_usd_rub_data()
    if 'error' in data: raise HTTPException(500, detail=data)
    return Response(content=data['datetime'], media_type='text/plain; charset=utf-8')

@app.get("/status")
async def status():
    return {'status': 'running', 'version': app.version}

@app.get("/")
async def root():
    return {'title': app.title, 'version': app.version, 'docs': '/docs'}

if __name__ == '__main__':
    # –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–∞ python investing_proxy.py
    import uvicorn
    uvicorn.run("__main__:app", host="localhost", port=8000, reload=True)